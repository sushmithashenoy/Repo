package com.booking.dao;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Query;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;

import com.booking.model.Event;
import com.booking.model.Guest;
import com.booking.model.Room;
import com.booking.model.User;

public class UserDAO extends AbstractDao {

	public static boolean login(User user) {
		Session session = factory.openSession();
		session.beginTransaction();
		return user.equals(session.get(User.class, user.getUsername()));
	}

	public static boolean addNewUser(String userName, String password) {
		Session session = factory.openSession();
		session.beginTransaction();
		User user = new User();
		user.setUserName(userName);
		user.setPassword(password);
		session.save(user);
		session.getTransaction().commit();
		session.close();
		return true;

	}

	public static Event makeBooking(Guest guest, String from, String to) {
		
			addGuest(guest);
		

		DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
		Date checkOut = null;
		Date checkIn = null;
		try {
			checkOut = formatter.parse(to);
			checkIn = formatter.parse(from);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		Room room=getAvailableRoom(checkIn, checkOut);
		return room==null? null:addEvent(guest,checkIn,checkOut,room);
		

	}

	private static Object addEvent(Guest guest, Date checkIn, Date checkOut, Room room) {
		Session session = null;
		Event event = new Event();
		try {
			session = factory.openSession();
			session.beginTransaction();
			event.setGuest(guest);
			event.setRoom(room);
			event.setCheckIn(checkIn);
			event.setCheckOut(checkOut);
			session.save(event);
			session.getTransaction().commit();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return event;
	}

	private static Room getAvailableRoom(Date checkIn, Date checkOut) {
		Session session = null;
		List<Room> rooms=new ArrayList<Room>();
		try {
		session=factory.openSession();
		session.createCriteria(Room.class)

				.add(Restrictions.not(Restrictions.in("room.roomNo", getBookedRooms(checkOut, checkIn))));

		Criteria criteria = session.createCriteria(Room.class);
		criteria.add(Restrictions.not(Restrictions.in("roomNo", getBookedRooms(checkOut, checkIn))));

		 rooms = criteria.list();
		System.out.println("-------------------------Available Rooms--------------------------------");
		rooms.forEach(room -> System.out.println(room.getRoomNo()));
		}
		catch (Exception e) {
e.printStackTrace();		}
		return rooms.get(0);

	}



	private static List<String> getBookedRooms(Date checkOut, Date checkIn) {
		Session session = null;
		List<String> roomNos = new ArrayList<String>();
		try {
			String hql = "select e.room.roomNo From Event e  Where  (e.checkIn <= :checkIn and  e.checkOut >= :checkIn ) OR (e.checkIn <= :checkOut and e.checkOut >= :checkOut)";
			session = factory.openSession();
			Query query = session.createQuery(hql).setParameter("checkIn", checkIn).setParameter("checkOut", checkOut);
			System.out.println(query.toString());
			roomNos = query.getResultList();
			System.out.println("-------------------------Booked Rooms--------------------------------");
			roomNos.forEach(System.out::println);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return roomNos;
	}


	private static void addGuest(Guest guest) {
		Session session = null;
		try {
			session = factory.openSession();
			session.beginTransaction();
			session.save(guest);
			session.getTransaction().commit();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
	}


	public static void main(String[] args) {
		Guest guest = new Guest();
		guest.setName("sushmitha" + " " + "shenoy");
		guest.setEmail("myemail");
		guest.setContact("01234567");
		makeBooking(guest, "03/25/2019", "04/26/2019");
	}
}
